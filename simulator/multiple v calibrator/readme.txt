This is responsible for calibrating the intrinsic parameters k_r k_l and b given three different pair of velocities v and w

1) calibratemul.cpp -> definition of functions
2) calibratemul.h -> their declarations
3) calibratemul_test.cpp -> the testing

mul_traj_gen.cpp just allows me to simulate a trajectory with pair of velocities(v,w) with the assumption that micp algorithm estimated them for me correctly after having given it scans related to each of the velocities.
I took this approach to simplify coding. mul_traj_gen.cpp acts as a bridge to create the resources I need (ticks and time_ss) in one single file.

So run mul_traj_gen.cpp first then run the calibrate_test.
__________________________________________________________________________________________________________________________________
update :
decoupled_calibration_micp reads uses the velocities of micp directly so no need to run "mul_traj_gen.cpp" before

0) run the simulator sim_mul to generate ticks and scans
1) run ./validate program to which the scans are fed, the program automatically writes the estimated velocities in micp_velocities.dat
2) run decoupled_calib which is the compilation of decoupled_calibration_micp 
	-> it reads the velocities estimated by micp
	-> it reads the ticks generated by the simulator and provides the kinematic parameters
